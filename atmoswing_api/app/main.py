import logging
import os
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from atmoswing_api import config
from atmoswing_api.__version__ import __version__
from atmoswing_api.app.routes import meta, forecasts, aggregations, docs
from slowapi import Limiter
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware
import traceback

# Ensure the directory for the log file exists
log_file_path = config.Settings().data_dir + '/app.log'
os.makedirs(os.path.dirname(log_file_path), exist_ok=True)

# Create a logger
logger = logging.getLogger()
#logger.setLevel(logging.DEBUG)  # Set the base level to DEBUG to capture all messages

# File handler for errors
file_handler = logging.FileHandler(log_file_path)
file_handler.setLevel(logging.ERROR)  # Log only errors and above to the file
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)

# Stream handler for terminal output
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)  # Log info and above to the terminal
stream_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
stream_handler.setFormatter(stream_formatter)

# Add handlers to the logger
logger.addHandler(file_handler)
logger.addHandler(stream_handler)

app = FastAPI(
    title="AtmoSwing Web Forecast API",
    description="API to provide forecasts generated by AtmoSwing.",
    version=__version__,
)

# Set up rate limiter
limiter = Limiter(key_func=get_remote_address, default_limits=["120/minute"])

# Add SlowAPI middleware for rate limiting
app.add_middleware(SlowAPIMiddleware, limiter=limiter)

# Configure CORS middleware -- disabled as it is not working as expected.
#app.add_middleware(
#    CORSMiddleware,
#    allow_origins=["*"],
#    allow_methods=["GET", "OPTIONS"],
#    allow_headers=["*"],
#)

# Include the routes
app.include_router(docs.router, tags=["Documentation"])
app.include_router(meta.router, prefix="/meta", tags=["Metadata"])
app.include_router(forecasts.router, prefix="/forecasts", tags=["Data from a single forecast"])
app.include_router(aggregations.router, prefix="/aggregations", tags=["Aggregated forecast data"])

@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(request: Request, exc: StarletteHTTPException):
    if exc.status_code == 404:
        return JSONResponse(
            status_code=404,
            content={"detail": "This route does not exist. "
                               "Please check the URL or refer to the documentation."},
        )
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail},
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    tb = traceback.format_exc()
    logger.error(f"Unhandled exception: {exc}\nTraceback:\n{tb}")
    if isinstance(exc, MemoryError):
        logger.error("MemoryError: Possible resource exhaustion!")
    return JSONResponse(status_code=500, content={"detail": "Internal server error."})

@app.exception_handler(RateLimitExceeded)
async def rate_limit_handler(request: Request, exc: RateLimitExceeded):
    logger.warning(f"Rate limit exceeded: {exc}")
    return JSONResponse(status_code=429, content={"detail": "Rate limit exceeded. Please try again later."})
